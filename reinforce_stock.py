# -*- coding: utf-8 -*-
"""Reinforce_Stock

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1prVvVJEF-FCE1K5WAWG3MV6MPnm1e8FM
"""

!pip install stable_baselines3
!pip install shimmy

import yfinance as yf

data = yf.download("AAPL", start="2015-01-01", end="2020-01-01")
print(data.head())

import gym
import numpy as np
from stable_baselines3 import PPO

class StockEnv(gym.Env):
    def __init__(self, prices):
        super(StockEnv, self).__init__()
        self.prices = prices
        self.current_step = 0
        self.balance = 10000
        self.shares = 0
        self.action_space = gym.spaces.Discrete(3)  # 0=Hold,1=Buy,2=Sell
        self.observation_space = gym.spaces.Box(low=0, high=np.inf, shape=(1,))

    def reset(self):
        self.current_step = 0
        self.balance = 10000
        self.shares = 0
        return np.array([self.prices[self.current_step]])

    def step(self, action):
        price = self.prices[self.current_step]
        if action == 1 and self.balance >= price:   # Buy
            self.shares += 1
            self.balance -= price
        elif action == 2 and self.shares > 0:       # Sell
            self.shares -= 1
            self.balance += price

        self.current_step += 1
        done = (self.current_step >= len(self.prices)-1)
        portfolio = self.balance + self.shares * self.prices[self.current_step]
        reward = portfolio - 10000  # reward = 相對於初始資產
        obs = np.array([self.prices[self.current_step]])
        return obs, reward, done, {}

env = StockEnv(prices=data["Close"].values[:1000])
model = PPO("MlpPolicy", env, verbose=1)
model.learn(total_timesteps=10000)